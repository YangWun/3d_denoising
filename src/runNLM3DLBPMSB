#!/usr/bin/env python2.7

import os
import cv2
import numpy as np
import sys, argparse

#from NLMeans3D import *
from NLM3DLBPMSB import *
from operator import itemgetter
import time

#Parser for input arguments
parser = argparse.ArgumentParser(description='This is a script for NLM3D-LBP-MSB and NLM3D-LBP-Adaptive.')
parser.add_argument('-in','--input', help='Input PATH with the input images (With Noise)',required=True)
parser.add_argument('-out','--output',help='Input PATH to save the output image (Denoised)', required=True)
parser.add_argument('-H','--filterStrength',help='Input the parameter H (Filter Strength)', type=int, required=False, default=3)
parser.add_argument('-p','--patch',help='Input the size of patch (Neighborhood size of centered voxel)', type=int,required=False, default=7)
parser.add_argument('-w','--window',help='Input the size of search window (Window size of centered voxel)', type=int,required=False, default=21)
parser.add_argument('-msb','--MSBValue',help='Value of Most Significant Bit', type=int, required=False, default=4)
args = parser.parse_args()

#Convert arguments
pathNoiseFrames = args.input
pathDenoised = args.output
h = args.filterStrength
patchSize = args.patch
windowSize = args.window
valueMSB = args.MSBValue

print ('\nH: %d, PatchSize: %d, WindowSearchSize: %d') % (h, patchSize, windowSize)

#Check if the Path for denoised images exist
#if don't, create!
if not os.path.exists(pathDenoised):
    os.makedirs(pathDenoised)

#Create list of all .PNG noise images
noiseFrameList = sorted(os.listdir(pathNoiseFrames))
noiseFrameList = [f for f in noiseFrameList if '.png' in f]

# filters only ONE frame
n = (patchSize / 2) * 2 + (windowSize / 2) * 2 + 1
noiseFrameList = noiseFrameList[len(noiseFrameList) / 2 - n/2:len(noiseFrameList) / 2 + n/2 + 1]

#Auxiliar
nFrames = len(noiseFrameList)
i = 0

#Create a NLMeans3D object
nlm = NLM3DLBPMSB(h = h, templateWindowSize = patchSize, searchWindowSize = windowSize, nMSB = valueMSB)

#Read noise frames
for f in noiseFrameList:
    #Read noise image
    auxPath = pathNoiseFrames + '/' + f
    gray = cv2.imread(auxPath, cv2.IMREAD_GRAYSCALE)
    gray = gray.astype(np.float64)#/255.0

    if i == 0:
        noiseVideo = np.zeros((nFrames, gray.shape[0], gray.shape[1]))

    #add frame to noiseVideo
    noiseVideo[i] = gray

    i += 1

#Get index denoised image
aux = patchSize / 2 + windowSize / 2

#Get start execution time
start_time = time.time()

#Run NLMeans3D denoise
print "\nRun NLMeans3D++"
nlm3d_viORI_texLBPMSB, nlm3d_viORI_texLBPAdaptive = nlm.denoise(noiseVideo)

print "\n"

#Get final execution time
total_time = time.time() - start_time

#Add PSNR and SSIM in list
rank = [("NLM3D-LBP-MSB",nlm3d_viORI_texLBPMSB[aux])]
rank.append(("NLM3D-LBP-Adaptive",nlm3d_viORI_texLBPAdaptive[aux]))

#Save Results
text_file = open(pathDenoised + "results.txt", "w")

text_file.write("\n---------------------------------------------\n")

text_file.write("Parameters: \n")
text_file.write("H: %d\n" % h)
text_file.write("PatchSize: %d\n" % patchSize)
text_file.write("WindowSize: %d\n" % windowSize)

text_file.write("\n---------------------------------------------\n")

text_file.write("Execution Time: %s \n\n" % time.strftime('%Hhrs %Mmin %Ssec', time.gmtime(total_time)))

text_file.write("\n---------------------------------------------\n")
text_file.close()

#Save noise image
denoiseImagePath = pathDenoised + 'noise.png'
cv2.imwrite(denoiseImagePath, noiseVideo[aux])

for i in range(0,len(rank)):
    #Writing image
    aux2 = rank[i][1].astype(np.uint8)
    denoiseImagePath = pathDenoised + rank[i][0] + '.png'
    cv2.imwrite(denoiseImagePath, aux2)
