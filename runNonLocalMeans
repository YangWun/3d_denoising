#!/usr/bin/env python2.7

import os
import cv2
import numpy as np
import sys, argparse
#from NLMeans3D import *
from ParNLMeans3D import *
from ParNLMeans2D import *
from compareImages import *
from operator import itemgetter
import time

#Parser for input arguments
# Required = IN, OUT and ORI (Paths)
# Optional = H, P and W (NLMeans parameters)
parser = argparse.ArgumentParser(description='This is a script for NLMeans-3D-LBP.')
parser.add_argument('-in','--input', help='Input PATH with the input images (With Noise)',required=True)
parser.add_argument('-out','--output',help='Input PATH to save the output image (Denoised)', required=True)
parser.add_argument('-ori','--originals',help='Input PATH with the original images (Without Noise)', required=True)
parser.add_argument('-H','--filterStrength',help='Input the parameter H (Filter Strength)', type=int, required=False, default=3)
parser.add_argument('-p','--patch',help='Input the size of patch (Neighborhood size of centered voxel)', type=int,required=False, default=7)
parser.add_argument('-w','--window',help='Input the size of search window (Window size of centered voxel)', type=int,required=False, default=21)
parser.add_argument('-alg','--algorithm',help='Choose which algorithm will perform ()', choices=['nlm', 'nlmlbp', 'nlm3d', 'nlm3dlbp'], required=False)
args = parser.parse_args()

#Convert arguments
pathNoiseFrames = args.input
pathDenoised = args.output
pathOri = args.originals
h = args.filterStrength
patchSize = args.patch
windowSize = args.window

#Check if the Path for denoised images exist
#if don't, create!
if not os.path.exists(pathDenoised):
    os.makedirs(pathDenoised)

#Create list of all .PNG noise images
noiseFrameList = sorted(os.listdir(pathNoiseFrames))
noiseFrameList = [f for f in noiseFrameList if '.png' in f]

#Create list of all .PNG original images
oriFrameList = sorted(os.listdir(pathOri))
oriFrameList = [f for f in oriFrameList if '.png' in f]

# filters only ONE frame
n = (patchSize / 2) * 2 + (windowSize / 2) * 2 + 1
noiseFrameList = noiseFrameList[0:n]
oriFrameList = oriFrameList[0:n]

#Auxiliar
nFrames = len(noiseFrameList)
i = 0

#Create a NLMeans3D object
nlm = ParNLMeans3D(h,patchSize,windowSize)

#Read noise frames
for f in noiseFrameList:
    #Read noise image
    auxPath = pathNoiseFrames + '/' + f
    gray = cv2.imread(auxPath, cv2.IMREAD_GRAYSCALE)
    gray = gray.astype(np.float64)#/255.0

    if i == 0:
        noiseVideo = np.zeros((nFrames, gray.shape[0], gray.shape[1]))

    #add frame to noiseVideo
    noiseVideo[i] = gray

    i += 1

i = 0
#Read original frames
for f in oriFrameList:
    #Read original image
    auxPath = pathOri + '/' + f
    gray = cv2.imread(auxPath, cv2.IMREAD_GRAYSCALE)
    gray = gray.astype(np.float64)#/255.0

    if i == 0:
        oriVideo = np.zeros((nFrames, gray.shape[0], gray.shape[1]))

    #add frame to noiseVideo
    oriVideo[i] = gray

    i += 1

#Get index denoised image
aux = patchSize / 2 + windowSize / 2

#Get start execution time
start_time = time.time()

#Run NLMeans2D OpenCV
outOpencv = cv2.fastNlMeansDenoising(np.uint8(noiseVideo[aux]),h=h,templateWindowSize=patchSize,searchWindowSize=windowSize)

#Run NLMeans2D denoised
nlm2d = ParNLMeans2D(h,patchSize,windowSize)
outNLM2D = nlm2d.denoise(noiseVideo[aux])

#Run NLMeans3D denoise
outNLM3D, outLBPAdaptive, outLBP, outMSB, outMSBLBP = nlm.denoise(noiseVideo)

#Get final execution time
total_time = time.time() - start_time


#Add PSNR and SSIM in list
rank = [("NLM2D",psnr(outNLM2D, oriVideo[aux]), ssim(outNLM2D, oriVideo[aux]))];
rank.append(("NLM2D-OpenCV",psnr(outOpencv.astype(np.float64), oriVideo[aux]), ssim(outOpencv.astype(np.float64), oriVideo[aux])))
rank.append(("NLM3D",psnr(outNLM3D[aux], oriVideo[aux]), ssim(outNLM3D[aux], oriVideo[aux])))
rank.append(("NLM3D + LBP",psnr(outLBP[aux], oriVideo[aux]), ssim(outLBP[aux], oriVideo[aux])))
rank.append(("NLM3D + LBP Adaptive",psnr(outLBPAdaptive[aux], oriVideo[aux]), ssim(outLBPAdaptive[aux], oriVideo[aux])))
rank.append(("NLM3D + MSB",psnr(outMSB[aux], oriVideo[aux]), ssim(outMSB[aux], oriVideo[aux])))
rank.append(("NLM3D + MSB + LBP",psnr(outMSBLBP[aux], oriVideo[aux]), ssim(outMSBLBP[aux], oriVideo[aux])))

#Sort by higher SSIM
rank = sorted(rank, key=itemgetter(2),reverse=True)

# #Show PSNR and SSIM
print ("\nImage Noise - PSNR: %.4f, SSIM %.4f \n") % \
            (psnr(noiseVideo[aux], oriVideo[aux]), \
            ssim(noiseVideo[aux], oriVideo[aux]))

for i in range(0,len(rank)):
    print (rank[i][0] +" - PSNR: %.4f, SSIM %.4f \n") % \
                (rank[i][1], \
                rank[i][2])

#Show PSNR and SSIM
#Save denoised images
aux2 = outNLM2D
aux2 = aux2.astype(np.uint8)
denoiseImagePath = pathDenoised + 'NLM2D-denoise.png'
cv2.imwrite(denoiseImagePath, aux2)

aux2 = outOpencv
aux2 = aux2.astype(np.uint8)
denoiseImagePath = pathDenoised + 'NLM2D-OpenCV-denoise.png'
cv2.imwrite(denoiseImagePath, aux2)

aux2 = outNLM3D[aux]
aux2 = aux2.astype(np.uint8)
denoiseImagePath = pathDenoised + 'NLM3D-denoise.png'
cv2.imwrite(denoiseImagePath, aux2)

aux2 = outLBP[aux]
aux2 = aux2.astype(np.uint8)
denoiseImagePath = pathDenoised + 'LBP-NLM3D-denoise.png'
cv2.imwrite(denoiseImagePath, aux2)

aux2 = outLBPAdaptive[aux]
aux2 = aux2.astype(np.uint8)
denoiseImagePath = pathDenoised + 'LBP-NLM3D-Adaptive-denoise.png'
cv2.imwrite(denoiseImagePath, aux2)

aux2 = outMSB[aux]
aux2 = aux2.astype(np.uint8)
denoiseImagePath = pathDenoised + 'MSB-NLM3D-denoise.png'
cv2.imwrite(denoiseImagePath, aux2)

aux2 = outMSBLBP[aux]
aux2 = aux2.astype(np.uint8)
denoiseImagePath = pathDenoised + 'MSB-LBP-NLM3D-denoise.png'
cv2.imwrite(denoiseImagePath, aux2)

#Save PSNR and SSIM in file
text_file = open(pathDenoised + "results.txt", "w")

text_file.write("\n---------------------------------------------\n")

text_file.write("Parameters: \n")
text_file.write("H: %d\n" % h)
text_file.write("PatchSize: %d\n" % patchSize)
text_file.write("WindowSize: %d\n" % windowSize)

text_file.write("---------------------------------------------\n")

text_file.write("Execution Time: %s seconds \n\n" % total_time)

text_file.write("---------------------------------------------\n")

text_file.write(("Image Noise - PSNR: %0.4f, SSIM %.4f \n") % \
            (psnr(noiseVideo[aux], oriVideo[aux]),\
             ssim(noiseVideo[aux], oriVideo[aux])))

text_file.write("\n---------------------------------------------\n")

for i in range(0,len(rank)):
    text_file.write(("%s - PSNR: %.4f, SSIM %.4f \n") % \
                        (rank[i][0], rank[i][1], rank[i][2]))

text_file.close()
